<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="64" failures="0" errors="0" time="2.861">
  <testsuite name="gql.client" errors="0" failures="0" skipped="0" timestamp="2025-05-08T15:16:36" time="1.807" tests="11">
    <testcase classname="gql.client should be defined" name="gql.client should be defined" time="0.002">
    </testcase>
    <testcase classname="gql.client Storefront Token Handling should create a new storefront token if not cached" name="gql.client Storefront Token Handling should create a new storefront token if not cached" time="0.001">
    </testcase>
    <testcase classname="gql.client Storefront Token Handling should use cached storefront token if valid" name="gql.client Storefront Token Handling should use cached storefront token if valid" time="0.001">
    </testcase>
    <testcase classname="gql.client Storefront Token Handling should create a new token if cached token is expired" name="gql.client Storefront Token Handling should create a new token if cached token is expired" time="0">
    </testcase>
    <testcase classname="gql.client Storefront Token Handling should throw error if token creation returns invalid JSON" name="gql.client Storefront Token Handling should throw error if token creation returns invalid JSON" time="0.009">
    </testcase>
    <testcase classname="gql.client Storefront Token Handling should use empty array if allowedCorsOrigins is missing in config" name="gql.client Storefront Token Handling should use empty array if allowedCorsOrigins is missing in config" time="0.001">
    </testcase>
    <testcase classname="gql.client Storefront Token Handling should create a new token if cached token is near expiry (within 60s)" name="gql.client Storefront Token Handling should create a new token if cached token is near expiry (within 60s)" time="0">
    </testcase>
    <testcase classname="gql.client searchProductsByName should fetch and map products correctly on success" name="gql.client searchProductsByName should fetch and map products correctly on success" time="0">
    </testcase>
    <testcase classname="gql.client searchProductsByName should throw and log error on GQL network error" name="gql.client searchProductsByName should throw and log error on GQL network error" time="0">
    </testcase>
    <testcase classname="gql.client searchProductsByName should throw and log error on GQL response error" name="gql.client searchProductsByName should throw and log error on GQL response error" time="0.001">
    </testcase>
    <testcase classname="gql.client searchProductsByName should throw and log error if token creation fails" name="gql.client searchProductsByName should throw and log error if token creation fails" time="0">
    </testcase>
  </testsuite>
  <testsuite name="cache.service" errors="0" failures="0" skipped="0" timestamp="2025-05-08T15:16:38" time="0.34" tests="10">
    <testcase classname="cache.service Memory Cache Engine should initialize memory cache engine" name="cache.service Memory Cache Engine should initialize memory cache engine" time="0.001">
    </testcase>
    <testcase classname="cache.service Memory Cache Engine should set value in memory cache" name="cache.service Memory Cache Engine should set value in memory cache" time="0">
    </testcase>
    <testcase classname="cache.service Memory Cache Engine should get value from memory cache" name="cache.service Memory Cache Engine should get value from memory cache" time="0.001">
    </testcase>
    <testcase classname="cache.service Memory Cache Engine should check if key exists in memory cache" name="cache.service Memory Cache Engine should check if key exists in memory cache" time="0">
    </testcase>
    <testcase classname="cache.service Redis Cache Engine should initialize Redis cache engine" name="cache.service Redis Cache Engine should initialize Redis cache engine" time="0.005">
    </testcase>
    <testcase classname="cache.service Redis Cache Engine should set value in Redis cache" name="cache.service Redis Cache Engine should set value in Redis cache" time="0.007">
    </testcase>
    <testcase classname="cache.service Redis Cache Engine should get value from Redis cache" name="cache.service Redis Cache Engine should get value from Redis cache" time="0.004">
    </testcase>
    <testcase classname="cache.service Redis Cache Engine should check if key exists in Redis cache" name="cache.service Redis Cache Engine should check if key exists in Redis cache" time="0.006">
    </testcase>
    <testcase classname="cache.service Error Cases should throw error when cache engine is not defined" name="cache.service Error Cases should throw error when cache engine is not defined" time="0.007">
    </testcase>
    <testcase classname="cache.service Error Cases should throw error when cache engine is not supported" name="cache.service Error Cases should throw error when cache engine is not supported" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="content.manager.controller" errors="0" failures="0" skipped="0" timestamp="2025-05-08T15:16:38" time="0.131" tests="8">
    <testcase classname="content.manager.controller getProducts should return products when valid query is provided" name="content.manager.controller getProducts should return products when valid query is provided" time="0.001">
    </testcase>
    <testcase classname="content.manager.controller getProducts should return bad request when query is too short" name="content.manager.controller getProducts should return bad request when query is too short" time="0">
    </testcase>
    <testcase classname="content.manager.controller getProducts should return bad request when query is missing" name="content.manager.controller getProducts should return bad request when query is missing" time="0.001">
    </testcase>
    <testcase classname="content.manager.controller getProducts should call productService.searchProducts with the correct query parameter" name="content.manager.controller getProducts should call productService.searchProducts with the correct query parameter" time="0">
    </testcase>
    <testcase classname="content.manager.controller getProducts should handle errors from productService.searchProducts" name="content.manager.controller getProducts should handle errors from productService.searchProducts" time="0.005">
    </testcase>
    <testcase classname="content.manager.controller getProducts should return bad request when q is not a string" name="content.manager.controller getProducts should return bad request when q is not a string" time="0">
    </testcase>
    <testcase classname="content.manager.controller getProducts should return empty array when no products are found" name="content.manager.controller getProducts should return empty array when no products are found" time="0">
    </testcase>
    <testcase classname="content.manager.controller getProducts should handle exactly minimum length query (3 characters)" name="content.manager.controller getProducts should handle exactly minimum length query (3 characters)" time="0">
    </testcase>
  </testsuite>
  <testsuite name="rest.client" errors="0" failures="0" skipped="0" timestamp="2025-05-08T15:16:38" time="0.046" tests="6">
    <testcase classname="rest.client returns empty array if no ids are provided" name="rest.client returns empty array if no ids are provided" time="0">
    </testcase>
    <testcase classname="rest.client returns cached products if all are cached" name="rest.client returns cached products if all are cached" time="0">
    </testcase>
    <testcase classname="rest.client fetches missing products from API and caches them" name="rest.client fetches missing products from API and caches them" time="0">
    </testcase>
    <testcase classname="rest.client throws if fetch fails" name="rest.client throws if fetch fails" time="0.006">
    </testcase>
    <testcase classname="rest.client returns products in the order of input ids" name="rest.client returns products in the order of input ids" time="0">
    </testcase>
    <testcase classname="rest.client handles partial cache hits" name="rest.client handles partial cache hits" time="0">
    </testcase>
  </testsuite>
  <testsuite name="products.service" errors="0" failures="0" skipped="0" timestamp="2025-05-08T15:16:38" time="0.04" tests="7">
    <testcase classname="products.service getProductsById returns a map of products by id" name="products.service getProductsById returns a map of products by id" time="0.001">
    </testcase>
    <testcase classname="products.service getProductsById returns an empty map if no products are returned" name="products.service getProductsById returns an empty map if no products are returned" time="0">
    </testcase>
    <testcase classname="products.service getProductsById handles empty input array" name="products.service getProductsById handles empty input array" time="0">
    </testcase>
    <testcase classname="products.service getProductsById propagates errors from fetchProductsByIds" name="products.service getProductsById propagates errors from fetchProductsByIds" time="0.004">
    </testcase>
    <testcase classname="products.service searchProducts returns search results from GQL client" name="products.service searchProducts returns search results from GQL client" time="0">
    </testcase>
    <testcase classname="products.service searchProducts handles empty search result" name="products.service searchProducts handles empty search result" time="0.001">
    </testcase>
    <testcase classname="products.service searchProducts propagates errors from searchProductsByName" name="products.service searchProducts propagates errors from searchProductsByName" time="0">
    </testcase>
  </testsuite>
  <testsuite name="encryption utilities" errors="0" failures="0" skipped="0" timestamp="2025-05-08T15:16:38" time="0.034" tests="7">
    <testcase classname="encryption utilities encryptConfig should encrypt the sensitive fields in the config" name="encryption utilities encryptConfig should encrypt the sensitive fields in the config" time="0.001">
    </testcase>
    <testcase classname="encryption utilities encryptConfig should handle null/undefined sensitive fields" name="encryption utilities encryptConfig should handle null/undefined sensitive fields" time="0">
    </testcase>
    <testcase classname="encryption utilities decryptConfig should decrypt the sensitive fields in the config" name="encryption utilities decryptConfig should decrypt the sensitive fields in the config" time="0.001">
    </testcase>
    <testcase classname="encryption utilities decryptConfig should handle null/undefined sensitive fields" name="encryption utilities decryptConfig should handle null/undefined sensitive fields" time="0">
    </testcase>
    <testcase classname="encryption utilities encrypt-decrypt integration should successfully decrypt what was encrypted" name="encryption utilities encrypt-decrypt integration should successfully decrypt what was encrypted" time="0">
    </testcase>
    <testcase classname="encryption utilities actual crypto operations should encrypt and decrypt a value using real crypto operations" name="encryption utilities actual crypto operations should encrypt and decrypt a value using real crypto operations" time="0.001">
    </testcase>
    <testcase classname="encryption utilities actual crypto operations should correctly encrypt and decrypt a full config object using real operations" name="encryption utilities actual crypto operations should correctly encrypt and decrypt a full config object using real operations" time="0">
    </testcase>
  </testsuite>
  <testsuite name="getENVConfig" errors="0" failures="0" skipped="0" timestamp="2025-05-08T15:16:38" time="0.029" tests="3">
    <testcase classname="getENVConfig should return the plugin configuration" name="getENVConfig should return the plugin configuration" time="0">
    </testcase>
    <testcase classname="getENVConfig should return the correct configuration structure" name="getENVConfig should return the correct configuration structure" time="0.001">
    </testcase>
    <testcase classname="getENVConfig should work with redis engine configuration" name="getENVConfig should work with redis engine configuration" time="0">
    </testcase>
  </testsuite>
  <testsuite name="cacheDetection" errors="0" failures="0" skipped="0" timestamp="2025-05-08T15:16:38" time="0.025" tests="4">
    <testcase classname="cacheDetection isRedisEngine should return true for Redis engine config" name="cacheDetection isRedisEngine should return true for Redis engine config" time="0">
    </testcase>
    <testcase classname="cacheDetection isRedisEngine should return false for Memory engine config" name="cacheDetection isRedisEngine should return false for Memory engine config" time="0">
    </testcase>
    <testcase classname="cacheDetection isMemoryEngine should return true for Memory engine config" name="cacheDetection isMemoryEngine should return true for Memory engine config" time="0">
    </testcase>
    <testcase classname="cacheDetection isMemoryEngine should return false for Redis engine config" name="cacheDetection isMemoryEngine should return false for Redis engine config" time="0">
    </testcase>
  </testsuite>
  <testsuite name="bigCommerceService" errors="0" failures="0" skipped="0" timestamp="2025-05-08T15:16:38" time="0.029" tests="3">
    <testcase classname="bigCommerceService returns an object with getRestClient and getGQLClient methods" name="bigCommerceService returns an object with getRestClient and getGQLClient methods" time="0">
    </testcase>
    <testcase classname="bigCommerceService getRestClient returns the rest client instance" name="bigCommerceService getRestClient returns the rest client instance" time="0">
    </testcase>
    <testcase classname="bigCommerceService getGQLClient returns the gql client instance" name="bigCommerceService getGQLClient returns the gql client instance" time="0">
    </testcase>
  </testsuite>
  <testsuite name="getService" errors="0" failures="0" skipped="0" timestamp="2025-05-08T15:16:38" time="0.024" tests="4">
    <testcase classname="getService should return the requested service" name="getService should return the requested service" time="0.001">
    </testcase>
    <testcase classname="getService should work with service name: products" name="getService should work with service name: products" time="0">
    </testcase>
    <testcase classname="getService should work with service name: cache" name="getService should work with service name: cache" time="0">
    </testcase>
    <testcase classname="getService should work with service name: bigcommerce" name="getService should work with service name: bigcommerce" time="0">
    </testcase>
  </testsuite>
  <testsuite name="getPlugin" errors="0" failures="0" skipped="0" timestamp="2025-05-08T15:16:38" time="0.025" tests="1">
    <testcase classname="getPlugin should retrieve the shopify plugin instance" name="getPlugin should retrieve the shopify plugin instance" time="0">
    </testcase>
  </testsuite>
</testsuites>